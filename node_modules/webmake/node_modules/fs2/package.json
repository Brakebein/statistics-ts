{
  "name": "fs2",
  "version": "0.2.1",
  "description": "fs (file system package) extensions",
  "author": {
    "name": "Mariusz Nowak",
    "email": "medyk@medikoo.com",
    "url": "http://www.medikoo.com/"
  },
  "keywords": [
    "addons",
    "extensions",
    "extras",
    "fs",
    "filesystem",
    "mkdir",
    "readdir",
    "files",
    "dirs",
    "directories",
    "git"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/medikoo/fs2.git"
  },
  "dependencies": {
    "d": "~0.1.1",
    "deferred": "0.7.x",
    "es5-ext": "~0.10.2",
    "event-emitter": "~0.3.1",
    "memoizee": "0.3.x",
    "minimatch": "~0.2.14"
  },
  "devDependencies": {
    "tad": "0.2.x"
  },
  "scripts": {
    "test": "node ./node_modules/tad/bin/tad"
  },
  "engines": {
    "node": ">=0.8"
  },
  "licence": "MIT",
  "readme": "# fs2\n## Functions that complement and extend [fs](http://nodejs.org/api/all.html#all_file_system) package\n\n_Originally derived from [node-ext](https://github.com/medikoo/node-ext) package._\n\n## Installation\n\n\t$ npm install fs2\n\n## API\n### chmod(path, mode[, cb]) _(fs2/chmod)_\n\nSame as [fs.chmod](http://nodejs.org/api/all.html#all_fs_lchmod_path_mode_callback). Returns promise.\n\nNot available on Windows.\n\n### copy(src, dest[, options[, cb]]) _(fs2/copy)_\n\nCopy file, returns promise but accepts as well regular callback.\nEventual options are passed to underlying [fs.createWriteStream](http://nodejs.org/api/all.html#all_fs_createwritestream_path_options)\n\n### descriptorsHandler() _(fs2/descriptors-handler)_\n\nInitializes _EMFILE_ errors prevention.\n\n**To be used only in main modules. Never require it in generic module that may be required in others**  \n\nHow it works? If limit of descriptors is reached it holds the calls to native functions and releases them when taken descriptors are freed.\n\nInternally it provides same solution as [fs-graceful](https://github.com/isaacs/node-graceful-fs) module with following differences:\n\n1. Focuses only on file descriptors limit problem\n2. Gives access to taken/available descriptors count and allows setting of limit by external module. Thanks to that we can also cover descriptors opened by fs.watch module ([watch](#watchpath) is bound to that module)\n3. Covers readdir calls (which also happen to throw _EMFILE_ errors)\n4. More bulletproof (I assume) error handling logic\n\n### isIgnored(mode, path[, options[, cb]]) _(fs2/is-ignored)_\n\nWhether file is ignored up to predefined rules. Returns promise but regular callback is also supported.\n\nRules are decided by _mode_ argument. Currently only `git` mode is supported, in that case rules are searched in _.gitignore_ files (Rules have effect only if placed in valid _git_ repositories).\nOther modes can be easily configured by extending `_ignoreModes` module (See _lib/fs/\\_ignore-modes_ directory to see how it's done).\n\nSupported options:\n* __globalRules__ `string|array` - additional global rules. They will be matched as if placed in filesystem root directory, it means that any rules found in existing ignore files may override them.\n* __watch__ `bool` - whether to watch for changes. If ignore state would change, returned promise would emit `change` event with new value (_true_/_false_)\n\n### lchmod(path, mode[, cb]) _(fs2/lchmod)_\n\nSame as [fs.lchmod](http://nodejs.org/api/all.html#all_fs_lchmod_path_mode_callback). Returns promise.\n\nOnly available on Mac OS X.\n\n### lstat(path[, cb]) _(fs2/lstat)_\n\nSame as [fs.lstat](http://nodejs.org/api/all.html#all_fs_lstat_path_callback). Returns promise.\n\n### mkdir(path[, options|mode[, cb]]) _(fs2/mkdir)_\n\nExtended version of native _mkdir_. Returns promise\n\nSupported options:\n* __mode__ - Reflects _mode_ in [native version](http://nodejs.org/api/all.html#all_fs_mkdir_path_mode_callback)\n* __intermediate__ - Whether to create directories recursively (if parent is not created), reflects `mkir -p`, internal implementation inspired by [Substack's node-mkdirp](https://github.com/substack/node-mkdirp/)\n\n### readFile(path[, options][, cb]) _(fs2/read-file)_\n\nExtended version of native [fs.readFile](http://nodejs.org/api/all.html#all_fs_readfile_filename_encoding_callback). Returns promise\n\nSupported options:\n* __loose__ - Do not error if file doesn't exits or is inaccessible, return _null_ instead.\n* __watch__ - Whether to watch file for changes. Changes are emited via _change_ event on returned promise. If file was removed and _loose_ option is off, _end_ event is emitted and watcher is closed\n\n### readdir(path[, options[, cb]]) _(fs2/readdir)_\n\nExtended version of native [fs.readdir](http://nodejs.org/api/all.html#all_fs_readdir_path_callback). Returns promise\n\nSuported options:\n* __depth__ `number`- Level of recurse into subdirectories. Defaults to _0_ which resembles behavior of native version. If you want to recurse without any nest limitation just provide _Infinity_\n* __type__ `object`- Which type of files should be returned. By default all files are returned. [Stats methods](http://nodejs.org/api/all.html#all_class_fs_stats) shows how many different types can be returned. To narrow it down provide a hash. e.g. `{ file: true, symbolicLink: true }`.\n* __pattern__ `regexp`- Filter returned files by specific pattern. Pattern should be regular expression that would be matched against full path.\n* __watch__ `bool` - Watch directory for changes. Changes are emitted on returned promise with `data` events. _event_ object states which files were added (`event.added`) and which were removed (`event.removed`), ___Starting from next release (v0.4) this functionality will most likely be provided as valid Node.js [stream](http://nodejs.org/api/all.html#all_stream)___\n* __stream__ `bool` - Whether to provide data continuously. Currently it's not provided as a [stream](http://nodejs.org/api/all.html#all_stream) per se (it would be starting from next release, v0.4), data is emited as `data` events on returned promise object, structure of _event_ objects described under _watch_ option\n* __ignoreRules__ `string|array` - Whether to obey ignore rules found in ignore files. See _[fs.isIgnored](#isignoredmode-path-options-cb)_ for more information\n* __globalRules__ `string|array` - Global rules that complement ignoreRules. See _[fs.isIgnored](#isignoredmode-path-options-cb)_ for more information.\n\n### rename(oldPath, newPath[, cb]) _(fs2/rename)_\n\nSame as [fs.rename](http://nodejs.org/api/all.html#all_fs_rename_oldpath_newpath_callback). Returns promise.\n\n### rmdir(path[, options[, cb]]) _(fs2/rmdir)_\n\nExtended version of native _rmdir_. Returns promise\n\nSupported options:\n* __recursive__ - Attempt to remove directory with subdirectories recursively.\n* __force__ - Attempt to remove other files within directory as well.\n\n### stat(path[, cb]) _(fs2/stat)_\n\nSame as [fs.stat](http://nodejs.org/api/all.html#all_fs_stat_path_callback). Returns promise.\n\n### symlink(srcPath, dstPath[, type[, cb]]) _(fs2/symlink)_\n\nSame as [fs.symlink](http://nodejs.org/api/all.html#all_fs_symlink_srcpath_dstpath_type_callback). Returns promise.\n\n### typeByStats(stats) _(fs2/type-by-stats)_\n\nReturns type of file according to provided [stats](http://nodejs.org/api/all.html#all_class_fs_stats) object.\n\n### unlink(path[, cb]) _(fs2/unlink)_\n\nSame as [fs.unlink](http://nodejs.org/api/all.html#all_fs_unlink_path_callback). Returns promise.\n\n### watchPath(path) _(fs2/watch-path)_\n\nWatch specific path for changes. It's about observing specific file path (not directory content). `change` events are emitted with event object where `event.type` says wether file was created, modified or removed.\n\n### watch(path) _(fs2/watch)_\n\nWatch file for changes.  \n[fs.watch](http://nodejs.org/api/all.html#all_fs_watch_filename_options_listener) wrapper that works same way on every platform, always configured in _persistent: false_ mode.\nIt's aware of open file descriptors limitations, if _EMFILE_ error is approach, switch to alternative mode that pings file stats (see [fs.watchFile](http://nodejs.org/api/all.html#all_fs_watchfile_filename_options_listener)) is made.\n\n\n### writeFile(filename, data[, options|encoding[, callback]]) _(fs2/write-file)_\n\nSame as native [fs.writeFile](http://nodejs.org/api/all.html#all_fs_writefile_filename_data_encoding_callback) but safe for simultaneous calls of write to same file (in such case current write will be abandonded, and new would be started).\n\nSupported options:\n* __encoding__ - Reflects _encoding_ in [native version](http://nodejs.org/api/all.html#all_fs_writefile_filename_data_options_callback)\n* __intermediate__ - In case directory doesn't exist, whether to create full directory path\n\n## Tests [![Build Status](https://travis-ci.org/medikoo/fs2.png?branch=master)](https://travis-ci.org/medikoo/fs2)\n\n\t$ npm test\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/medikoo/fs2/issues"
  },
  "_id": "fs2@0.2.1",
  "dist": {
    "shasum": "f4620ab6533a93b1fa3c48b69c03fea011439107"
  },
  "_from": "fs2@~0.2.1",
  "_resolved": "https://registry.npmjs.org/fs2/-/fs2-0.2.1.tgz"
}
